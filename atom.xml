<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ice Write Blog]]></title>
  <link href="http://iceongrass.github.io/atom.xml" rel="self"/>
  <link href="http://iceongrass.github.io/"/>
  <updated>2014-02-09T20:28:08+08:00</updated>
  <id>http://iceongrass.github.io/</id>
  <author>
    <name><![CDATA[iceongrass]]></name>
    <email><![CDATA[iceongrass@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[每日UX速成课-1 of 31]]></title>
    <link href="http://iceongrass.github.io/blog/2014/02/09/daily-ux-crash-course-1-of-31-chr/"/>
    <updated>2014-02-09T20:18:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2014/02/09/daily-ux-crash-course-1-of-31-chr</id>
    <content type="html"><![CDATA[<p>本课程为期一个月，目的在于能让更多的设计者（或者有抱负的设计者）学习如何进行用户体验设计。学习某项课程的最佳途径就是从头学习：</p>

<h2>神马是用户体验？</h2>

<hr />

<h3>每件事物都有用户体验，我们的工作并非“创造”用户体验，而是让用户得到“好”的体验。</h3>

<p>那么神马才是我们所说的<strong>&ldquo;好&rdquo;</strong>的体验呢？</p>

<p>人们一般会认为一个能够让用户<strong>开心</strong>的用户体验就是好的体验。您糊涂啊！如果取悦用户是我们唯一的目的，那我们只要丢给他们一些类似<a href="http://www.lolcats.com/">Lolcats</a>的卖萌网站或者说些<a href="http://emergencycompliment.com/">恭维的话</a>，之后就可以该干啥干啥去了。可是——尽管这不是我所能想象到的最坏的情况——您的老板八成不会为这样的结果买单。</p>

<!--more-->


<p>一个用户体验设计师的真正目标应该是使用户<strong>高效</strong>。</p>

<hr />

<h3>个体用户的体检仅仅是冰山一角：</h3>

<p>不少人都会错误的认为用户体验就是<strong>某个用户的体验</strong>，但实际上它指的是<strong>搞</strong>用户体验设计的过程。</p>

<p>某个用户的个体体验是他们对于您的应用或者网站的有意识的、主观的感觉。用户反馈非常——至少有些时候非常——重要，但是用户体验设计所需要做的则远远不止这些。</p>

<hr />

<h3><strong>&ldquo;搞&rdquo;</strong>用户体验</h3>

<p>搞用户体验设计（UXD）与搞科学有着非常相似的过程：我们会弄些研究去搞清用户的想法；我们会琢磨出一些方案去搞定用户的需求，或者生意的需求；我们也会在真实的世界里实现和度量这些方案，来看看我们想的是不是对的。</p>

<p>您将在接下来的一个月里学到这些东西。或者如果您觉得这些东西跟您半毛钱关系木有，那么Lolcats也还是个不错的选择！</p>

<p>明天我们将学习<a href="#">两种可以改变您的设计理念的用户体验的目标</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UX速成教程-概要]]></title>
    <link href="http://iceongrass.github.io/blog/2014/02/09/ux-crash-course-31-fundamentals-chr/"/>
    <updated>2014-02-09T19:46:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2014/02/09/ux-crash-course-31-fundamentals-chr</id>
    <content type="html"><![CDATA[<p>前两天看到有人分享一个叫Joel Marsh的哥们写了一个为期31天的关于用户体验设计课程，文字短小精干，语言言简意赅，举例恰如其分，语言风趣幽默，于是产生了翻译过来与诸君共赏的想法。</p>

<p>原文地址请戳：<font color="red"><a href="http://thehipperelement.com/post/75476711614/ux-crash-course-31-fundamentals">戳我戳我</a></font></p>

<h2>概要</h2>

<p>我2014年的新年愿望是让更多的人加入用户体验（UX）设计的行业。在过去的一月份里我每天发布一课，已经吸引了数以万计朋友们的关注。</p>

<p>您能从下文的链接里找到全部的31节课程的内容。</p>

<!--more-->


<hr />

<h3>UX的基本原则：从哪儿开始</h3>

<p>下面的长长的列表并不是所有您能从UX中所学习到的内容，这只不过是个概述，一个能够帮助您尽可能快的从一只鸭蛋变成打倒小怪物的凹凸曼。您将从本课程中获得有关UX的几个主要组成部分的实际体验，此外，本课程还将告诉您从哪里可以学到更多，如果您希望的话。课程的顺序遵循实际的用户体验设计过程（好吧，或多或少遵循。。。），您可以按照自己的喜好去学习自己在意的内容。课程的每个章节同时也是相对独立的，随便的拖几个丢进您浏览器的书签页中作为参考吧！</p>

<hr />

<h3>总体介绍 &amp; 关键概念 (Introduction &amp; Key Ideas)</h3>

<h6>1— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-1-of-31">啥叫用户体验</a>（<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-1-of-31">What is UX?</a>）</h6>

<h6>2— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-2-of-31">用户目标 &amp; 业务目标</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-2-of-31">User Goals &amp; Business Goals</a>)</h6>

<h6>3— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-3-of-31">用户体验的五个要素</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-3-of-31">The 5 Main Ingredients of UX</a>)</h6>

<hr />

<h3>如何理解用户 (How to Understand Users)</h3>

<h6>4— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-4-of-31">啥是用户研究</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-4-of-31">What is User Research?</a>)</h6>

<h6>5— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-5-of-31">提问的窍门</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-5-of-31">How to Ask People Questions</a>)</h6>

<h6>6— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-6-of-31">建个用户档案</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-6-of-31">Creating User Profiles</a>)</h6>

<h6>7— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-7-of-31">针对设备设计</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-7-of-31">Designing for Devices</a>)</h6>

<h6>8— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-8-of-31">设计模板</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-8-of-31">Design Patterns</a>)</h6>

<hr />

<h3>信息架构 (Information Architecture)</h3>

<h6>9— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-9-of-31">啥是信息框架</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-9-of-31">What is Information Architecture?</a>)</h6>

<h6>10— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-10-of-31">用户故事 &amp; 信息框架的种类</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-10-of-31">User Stories &amp; Types of Information Archiecture</a>)</h6>

<h6>11— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-11-of-31">什么是线框</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-11-of-31">What is Wireframe</a>)</h6>

<hr />

<h3>视觉设计原则 (Visual Design Principles)</h3>

<h6>12— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-12-of-31">视觉的权重，对比和深度</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-12-of-31">Visual Weight, Contrast &amp; Depth</a>)</h6>

<h6>13— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-13-of-31">色彩</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-13-of-31">Colour</a>)</h6>

<h6>14— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-14-of-31">重复和模式突破</a>（<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-14-of-31">Repetition &amp; Pattern Breaking</a>）</h6>

<h6>15— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-15-of-31">线张力和边部张力</a>（<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-15-of-31">Line Tention &amp; Edge Tension</a>）</h6>

<h6>16— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-16-of-31">阵列和临近</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-16-of-31">Alignment &amp; Proximity</a>)</h6>

<hr />

<h3>功能布局设计 (Functional Layout Design)</h3>

<h6>17— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-17-of-31">Z-模板，F-模板和视觉层次</a>(<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-17-of-31">Z-Pattern, F-Pattern, and Visual Hierarchy</a>)</h6>

<h6>18— <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-18-of-31">浏览，搜索和发现</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-18-of-31">Browsing vs. Searching vs. Discovery</a>)</h6>

<h6>19- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-19-of-31">页框</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-19-of-31">Page Framework</a>)</h6>

<h6>20- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-20-of-31">折叠，图片和大标题</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-20-of-31">The Fold, Images, &amp; Headlines</a>)</h6>

<h6>21- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-21-of-31">交互轴</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-21-of-31">The Axis of Interaction</a>)</h6>

<h6>22- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-22-of-31">表单</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-22-of-31">Forms</a>)</h6>

<h6>23- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-23-of-31">CTA，说明和标签</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-23-of-31">Calls-to-Action, Instructions &amp; Labels</a>)</h6>

<h6>24- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-24-of-31">主要按钮和次要按钮</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-24-of-31">Primary &amp; Secondary Buttons</a>)</h6>

<hr />

<h3>用户心理学 (User Psychology)</h3>

<h6>25- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-25-of-31">条件反射</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-25-of-31">Conditioning</a>)</h6>

<h6>26- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-26-of-31">劝化</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-26-of-31">Persuasion</a>)</h6>

<h6>27- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-27-of-31">让体验改变体验</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-27-of-31">How Experience Changes Experience</a>)</h6>

<hr />

<h3>用数据来设计 (Designing with Data)</h3>

<h6>28- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-28-of-31">啥是数据</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-28-of-31">What is Data?</a>)</h6>

<h6>29- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-29-of-31">概要统计</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-29-of-31">Summary Statistics</a>)</h6>

<h6>30- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-30-of-31">图的形状</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-30-of-31">Graph Shapes</a>)</h6>

<h6>31- <a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-31-of-31">A/B测试</a> (<a href="http://thehipperelement.com/post/71886924188/daily-ux-crash-course-31-of-31">A/B Tests</a>)</h6>

<hr />

<h4>欢迎您把本文分享给其他对用户体验感兴趣的朋友们！</h4>

<p>如果您希望能够接触到更多有关UX的新奇的小玩意，欢迎关注<a href="http://thehipperelement.com/">作者的博客</a>，或者您也可以自己通过<a href="http://www.twitter.com/hipperelement">Twitter</a>找到这个有趣的家伙。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brew cask，Mac党的福音]]></title>
    <link href="http://iceongrass.github.io/blog/2014/01/20/usingbrewcask/"/>
    <updated>2014-01-20T23:00:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2014/01/20/usingbrewcask</id>
    <content type="html"><![CDATA[<p>在用惯了ubuntu上的app-get来搞软件的便捷之后，就连Windows也有了360和QQ管家之类能帮助一键安装软件的工具。在被app-store的繁琐和不给力搞到七荤八素之后，我一直都想找一个Mac上类似的工具，可诸如easy_install， pip， curl都不尽如人意。</p>

<p>终于，Mac党的福音来了！这就是brew cask（当当~当当当~~）</p>

<p>安装巨简单，两条命令搞定（前提是你已经安装了Xcode，当然你要是没装，那就忽略了这篇文章吧，下面的内容真不适合您）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -e <span class="err">&quot;</span><span class="k">$(</span>curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install<span class="k">)</span>
</span><span class='line'>brew tap phinze/homebrew-cask <span class="o">&amp;&amp;</span> brew install brew-cask
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>用法更是高大上到不需要动任何脑子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew cask install qq    <span class="c"># 安 </span>
</span><span class='line'>brew cask uninstall qq  <span class="c"># 卸</span>
</span><span class='line'>brew cask info qq       <span class="c"># 帮</span>
</span><span class='line'>brew cask search        <span class="c"># 查（看看都有啥可以装的，支持的软件还是蛮多的）</span>
</span><span class='line'>brew cask search qq     <span class="c"># 查与qq相关的软件</span>
</span><span class='line'>brew update <span class="o">&amp;&amp;</span> brew upgrade <span class="c"># 更新所有应用程序</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，与app-store不同，通过brew cask安装的程序并没有放在<code>/Applications</code>下，而是放在<code>/opt/homebrew-cask/Caskroom/</code>，只是会在Launchpad放入快捷方式而已。</p>

<p>此外，brew cask上软件的更新速度会比app-store的快一些。对于一些付费的软件，brew cask默认会安装适用版。</p>

<p>如此简单我也就不过多啰嗦! Enjoy yourself, please~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala学习笔记（2）]]></title>
    <link href="http://iceongrass.github.io/blog/2013/11/27/scalalearningnote2/"/>
    <updated>2013-11-27T17:15:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2013/11/27/scalalearningnote2</id>
    <content type="html"><![CDATA[<h2>数组专题</h2>

<p>无论是什么编程语言，数组无疑是最重要的数据结构之一，这节主要是关于scala中数组操作的用法和与其他语言的不同。</p>

<!--more-->


<hr />

<p>Scala中，数组按照长度固定与否可以分为两类，定长的使用Array，长度有可能变化的可以使用ArrayBuffer。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">nums</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// 包含10个Int对象的数组，所有元素初始化为null</span>
</span><span class='line'><span class="k">val</span> <span class="n">s</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">(</span><span class="s">&quot;Hello &quot;</span><span class="o">,</span><span class="s">&quot;World&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// 如果数组内的元素已经确定了个数和类型就不需要new，直接用等号连接即可</span>
</span><span class='line'><span class="n">s</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;Goodbye &quot;</span>
</span><span class='line'>  <span class="c1">// 访问元素使用( )而不是[ ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于变长数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.ArrayBuffer</span>
</span><span class='line'><span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="nc">ArragBuffer</span><span class="o">[</span><span class="kt">Int</span><span class="o">]()</span>
</span><span class='line'>  <span class="c1">// 定义一个空的整形数组缓冲</span>
</span><span class='line'><span class="n">b</span> <span class="o">+=</span> <span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// 向缓冲区的尾部加入元素</span>
</span><span class='line'><span class="n">b</span> <span class="o">+=</span> <span class="nc">Array</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// 向缓冲区的尾部加入一个数组</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">trimEnd</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">// 移除缓冲区的最后五个元素</span>
</span></code></pre></td></tr></table></div></figure>


<p>加入、删除等方法的名称与java的一样，这里不过多描述。需要提一下的是数组和数组缓冲是可以相互转化的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">toArray</span>  <span class="c1">// Array(1,2)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">toBuffer</span> <span class="c1">// ArrayBuffer(&quot;Goodbye &quot;, &quot;World)</span>
</span></code></pre></td></tr></table></div></figure>


<p>有一个方法比较有意思，原型是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">count</span><span class="o">(</span><span class="n">p</span><span class="k">:</span><span class="o">(</span><span class="kt">A</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Int</span>
</span></code></pre></td></tr></table></div></figure>


<p>一开始看字面意思还以为是计算数组中的元素个数，其实不是。这个方法接受一个返回值为Boolean型的函数（或许表达式更为合适）作为参数，作用是统计列表中有多少元素在应用该函数后返回true。比如说<code>a.count(_ &gt; 0)</code>就用于统计数组a中有多少元素是正数。</p>

<p>Scala同样支持多维数组，定义方法为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">matrix</span> <span class="k">=</span> <span class="nc">Array</span><span class="o">.</span><span class="n">hi</span><span class="o">[</span><span class="kt">Double</span><span class="o">](</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">)</span>  <span class="c1">// 三行四列</span>
</span><span class='line'><span class="n">matrix</span><span class="o">(</span><span class="mi">2</span><span class="o">)(</span><span class="mi">3</span><span class="o">)</span> <span class="k">=</span> <span class="mi">12</span>                   <span class="c1">// 对第二行三列的元素赋值</span>
</span></code></pre></td></tr></table></div></figure>


<p>有意思的是可以创建不规则的数组，每一行长度都不相同：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">triangle</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">]](</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">tiangle</span><span class="o">.</span><span class="n">lenght</span><span class="o">)</span>
</span><span class='line'>  <span class="n">triangle</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala 学习笔记（1）]]></title>
    <link href="http://iceongrass.github.io/blog/2013/11/23/scalastudynote1/"/>
    <updated>2013-11-23T22:54:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2013/11/23/scalastudynote1</id>
    <content type="html"><![CDATA[<p>接触Scala已经有一段时间时间了，但是没有从基础开始学起总是觉得缺些什么。于是入手了《快学Scala》准备系统学习，顺便一边学一边记记笔记吧。</p>

<!--more-->


<hr />

<h2>语法上的差异</h2>

<p>简单的语法方面的内容，之前的<a href="http://iceongrass.com/blog/2013/11/11/scalahen-shen-qi/">《Scala很神奇》</a>中简单的提到了一些，总结一下的话大概有这么几点：</p>

<ul>
<li>除了val（常量）和var（变量）以外，在scala shell中的任何代码段和表达式都会被分配给一个名称，可以通过这些明称直接访问名称内的值，比如说</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tmp</span> <span class="k">=</span> <span class="mi">8</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">19</span>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">res0</span> <span class="o">+</span> <span class="mi">8</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">27</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如上例所示，变量和函数在声明的时候并不需要人为指定变量类型（递归函数除外）。但若要指定类型可以这样：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sum</span><span class="o">(</span><span class="n">a</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>数据类型方面，区别于java，scala中没有基本类型，所有的类型（包括Int，Float，Boolean等）都是类。</p></li>
<li><p>关于操作符，个人感觉scala中的设计到运算操作符似乎全都被重载过。最典型的一个表达式<code>a + b</code>实际上可以理解为<code>a.+(b)</code>。实际上操作符<code>+</code>本身已经不是个运算符了，而是一个Int对象a的方法。这在Java中是不被允许的。（所以从这个角度来讲，scala要比java更加面向对象的）</p></li>
<li><p>引用外部库的时候，java库是可以直接import使用的，过程中的区别大概只是如果你想<code>import java.lang.math.*</code>，那么现在你需要<code>import java.lang.math._</code></p></li>
</ul>


<p>这当然不全了，我才读到第三章而已，以后发现了再补充哈。</p>

<hr />

<h2>代码结构和函数</h2>

<p>相对于Java、C++中语句（执行动作）和表达式（数值计算）作用的不同，scala中所有的语法结构似乎都是为了求值而存在的。这里我也总结了几点差异：</p>

<ol>
<li>if表达式是带值的。</li>
<li>代码块也带值，一般式最后一个表达式的计算结果。</li>
<li><code>;</code>这个东西在scala中是不必要的。你当然可以像是在java中那样使用<code>;</code>，但如果你不是想把多个表达式放在同一行的话，那基本上是没必要用的。</li>
<li>void类型在scala中是Unit。</li>
<li>return这个东西尽量不要出现，默认语法块的最后一个表达式回返回计算值。</li>
<li>没有编译检查。</li>
<li><code>i &lt;- expr</code>表示用i去遍历右边的表达式，该表达式的值一般为一个容器（collection）。</li>
<li>函数按功能可以分为两类，计算用的函数是要计算和返回值的；另一种函数只是去做了一件事情（可以称作副作用），而它的返回值没有意义，这样的函数一般返回Unit类型。函数定义的时候，前者的定义和代码需要通过<code>=</code>连接，后者则省略了<code>=</code>。</li>
<li>Scala中有一个‘懒值‘的概念，表现为变量声明时：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">word</span> <span class="k">=</span> <span class="n">io</span><span class="o">.</span><span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="s">&quot;/A/Reachable/Path/File.txt&quot;</span><span class="o">).</span><span class="n">mkString</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码在不被求值的时候是不会被初始化的，所以在代码在执行的过程中，如果word的值从来没有被用到，那么即使后面填的文件路径是错的也不会有异常被抛出来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试题一道：三天打渔两天晒网]]></title>
    <link href="http://iceongrass.github.io/blog/2013/11/11/a-interview-test/"/>
    <updated>2013-11-11T15:03:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2013/11/11/a-interview-test</id>
    <content type="html"><![CDATA[<p>某天去某公司面试，被要求写一个程序。程序要求如下：</p>

<p>某渔民张三，从2010年初开始打渔。该渔夫连续打三天渔后，要用两天时间晒网。要求写一段程序，判断某一日期当天张三是否要去打渔:</p>

<pre><code>1. 打渔的话返回1，不打渔返回0；
2. 要有异常处理。
</code></pre>

<!--more-->


<p>俺给出的答案如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/***************************************************************</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* fishDay.c</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">****************************************************************</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* Description:</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* There is a fishman who stated fishing job from 2010.01.01. </span>
</span><span class='line'><span class="cm">* He fishes every three days will have a two days rest to clear</span>
</span><span class='line'><span class="cm">* the net.</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">* This program can tell you if the man is fishing on the day </span>
</span><span class='line'><span class="cm">* you give.</span>
</span><span class='line'><span class="cm">*</span>
</span><span class='line'><span class="cm">***************************************************************/</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;assert.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define START_YEAR 2010</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef END_YEAR</span>
</span><span class='line'><span class="cp">#define END_YEAR 9999</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Count day number from the beginning of the start year to the </span>
</span><span class='line'><span class="cm">    giving day */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">countDays</span><span class="p">(</span><span class="kt">int</span> <span class="n">nYear</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nMonth</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nDay</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">monthDays</span> <span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="mi">0</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">120</span><span class="p">,</span> <span class="mi">151</span><span class="p">,</span> <span class="mi">181</span><span class="p">,</span> <span class="mi">212</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">243</span><span class="p">,</span> <span class="mi">273</span><span class="p">,</span> <span class="mi">304</span><span class="p">,</span> <span class="mi">334</span>
</span><span class='line'>        <span class="p">};</span>      <span class="cm">/* Count how many days past in this year befor </span>
</span><span class='line'><span class="cm">                    the giving month */</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="mi">365</span><span class="o">*</span><span class="p">(</span><span class="n">nYear</span><span class="o">-</span><span class="n">START_YEAR</span><span class="p">)</span>
</span><span class='line'>        <span class="o">+</span> <span class="n">monthDays</span><span class="p">[</span><span class="n">nMonth</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="o">+</span> <span class="n">nDay</span>
</span><span class='line'>        <span class="o">+</span> <span class="p">(</span><span class="n">runDays</span><span class="p">(</span><span class="n">nYear</span><span class="p">)</span> <span class="o">-</span> <span class="n">runDays</span><span class="p">(</span><span class="n">START_YEAR</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-</span> <span class="mi">1</span>     <span class="cm">/* Remove the Jan 1st ,2010 */</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Count how many run year past from year 0 */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">runDays</span><span class="p">(</span><span class="kt">int</span> <span class="n">nYear</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span> <span class="n">nYear</span><span class="o">/</span><span class="mi">4</span> <span class="o">-</span> <span class="n">nYear</span><span class="o">/</span><span class="mi">100</span> <span class="o">+</span> <span class="n">nYear</span><span class="o">/</span><span class="mi">400</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">fishDay</span><span class="p">(</span><span class="kt">int</span> <span class="n">nYear</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nMonth</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nDay</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">days</span><span class="p">;</span>   <span class="cm">/* Count how many days are there from the beginning</span>
</span><span class='line'><span class="cm">                    of the start year to the giving day */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">daysInMonth</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="mi">29</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span>
</span><span class='line'>        <span class="p">};</span>      <span class="cm">/* Day number in every month */</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Check the input nYear, nMonth and nDay */</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">((</span><span class="n">START_YEAR</span> <span class="o">&lt;=</span> <span class="n">nYear</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">END_YEAR</span> <span class="o">&gt;=</span> <span class="n">nYear</span><span class="p">));</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">nMonth</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="mi">12</span> <span class="o">&gt;=</span> <span class="n">nMonth</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="mi">2</span> <span class="o">==</span> <span class="n">nMonth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="mi">0</span> <span class="o">==</span> <span class="n">nYear</span><span class="o">%</span><span class="mi">400</span><span class="p">)</span>
</span><span class='line'>            <span class="o">||</span> <span class="p">((</span><span class="mi">0</span> <span class="o">==</span> <span class="n">nYear</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">nYear</span><span class="o">%</span><span class="mi">100</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">nDay</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">daysInMonth</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">nDay</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">((</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">nDay</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">daysInMonth</span><span class="p">[</span><span class="n">nMonth</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">nDay</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Check if the day is a fishing day */</span>
</span><span class='line'>    <span class="n">days</span> <span class="o">=</span> <span class="n">countDays</span><span class="p">(</span><span class="n">nYear</span><span class="p">,</span> <span class="n">nMonth</span><span class="p">,</span> <span class="n">nDay</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="n">days</span> <span class="o">%</span> <span class="mi">5</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>   <span class="cm">/* It&#39;s a fishing day */</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>   <span class="cm">/* It&#39;s a break day */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Test case</span>
</span><span class='line'><span class="cm">int main() {</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    if (fishDay(2010,1,0))</span>
</span><span class='line'><span class="cm">        printf(&quot;2010,1,0 is a fishing day.\n&quot;);</span>
</span><span class='line'><span class="cm">    else</span>
</span><span class='line'><span class="cm">        printf(&quot;2012,1,0 is not a fishing day.\n&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    if (fishDay(2010,1,5))</span>
</span><span class='line'><span class="cm">        printf(&quot;2010,1,5 is a fishing day.\n&quot;);</span>
</span><span class='line'><span class="cm">    else</span>
</span><span class='line'><span class="cm">        printf(&quot;2012,1,5 is not a fishing day.\n&quot;);</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">    if (fishDay(2012,1,6))</span>
</span><span class='line'><span class="cm">        printf(&quot;2012,1,6 is a fishing day.\n&quot;);</span>
</span><span class='line'><span class="cm">    else</span>
</span><span class='line'><span class="cm">        printf(&quot;2012,1,6 is not a fishing day.\n&quot;);</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">    if (fishDay(2013,1,5))</span>
</span><span class='line'><span class="cm">        printf(&quot;2013,1,5 is a fishing day.\n&quot;);</span>
</span><span class='line'><span class="cm">    else</span>
</span><span class='line'><span class="cm">        printf(&quot;2013,1,5 is not a fishing day.\n&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    return 0;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来结果是由于俺的简历不过关，面试官觉得后面的面试我再往后走就走不下去了，所以杯具了……我总觉得这个理由只不过是个借口，估计问题还是出在这段代码本身。</p>

<p>做了几年的QA，代码水平有所退步这个我是承认的。可是我还是没怎么能看出这段代码出什么大问题了。麻烦大家给挑挑刺呗。^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala很神奇]]></title>
    <link href="http://iceongrass.github.io/blog/2013/11/11/scalahen-shen-qi/"/>
    <updated>2013-11-11T01:25:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2013/11/11/scalahen-shen-qi</id>
    <content type="html"><![CDATA[<p>起初听到这个名词是在公司里，组内的技术大牛说这玩意是未来的语言。各种社区里也把scala吹的是神乎其神，可惜一整年忙于乱七八糟的事情一直没有机会深入了解。托csdn的福，没有让我赋闲在家的这段时间过于无聊，也开始接触了这门全新的语言。</p>

<!--more-->


<hr />

<h2>嘛是Scala？</h2>

<p>这玩意是跑在Java上的。代码可以与Java的代码无缝对接，语法格式某种程度上与python相似。这是一种类lisp的函数式语言，可以写的很像python和Java，也可以写的像楚留香……</p>

<p>如果你用Java写过代码，又了解些python方面的语法和特点，你看到用Scala写出的代码大概不会太难理解。废话少说，给个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">printArgs</span><span class="o">(</span><span class="n">args</span><span class="k">:</span><span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">i</span> <span class="k">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span><span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">args</span><span class="o">.</span><span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">args</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">printArgs</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码本身很简单，就是接收参数，然后把参数中的string逐行打印。语法特点相信大家应该也注意到了，scala中变量的类型声明和函数返回值类型是通过：后跟变量类型的方式完成的。Coding的时候，一条语句时“；”可选，代码块的缩进默认为两个空格执行。代码风格上scala讲究极简，能省略的就省略。</p>

<p>其实这些都好理解，最大的不同大概在于函数定义的方式上吧。函数式编程的理念就是”函数是第一公民“。Java中一切都是对象，定义函数一般通过“方法”的形式定义在类中。所以Scala在对待函数的方式上更像python。区别在于，python的函数名就是个symbol，而scala中的“=”让函数名更像是一个容器，装函数的容器。当然，这么说有些不严密，因为python中也是有lamda的^_^</p>

<p>函数执行结果是这个样字的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>scala printArgs.scala hi , world !
</span><span class='line'>hi
</span><span class='line'>,
</span><span class='line'>world
</span><span class='line'>!
</span></code></pre></td></tr></table></div></figure>


<p>然而，我给出的这个例子并不是真正的scala式编程。函数式的编程风格一般不喜欢变量（var）而更倾向于常量（var）更多情况下，他们会这样写代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">printArgs</span><span class="o">(</span><span class="n">args</span><span class="k">:</span><span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="n">args</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">printArgs</span><span class="o">(</span><span class="n">args</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>很飘逸，是不？一个变量没有，对象调用方法时println直接作为参数传入，要理解这个语句（如果您至少有个大学结业证的话）只要靠读的就好：把args中的每一个都用println搞一遍。</p>

<p>好吧，如果你觉得上面这个例子不够分量，那我们再来个稍微复杂些的例子。</p>

<hr />

<h2>另一个例子</h2>

<p>对于IT男来说，除了“hello world”和苍井空之外比较广为人知的，Fibonacci数列肯定算一个。相信大家入门时都写过这个算法，这里我给大家看看scala的实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">n</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">0</span> <span class="k">=&gt;</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span> <span class="k">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>相信不用我做过多解释各位看官就能理解。然而这并不是一个好的实现，当n比较大的时候，第三个case将产生很深的调用栈，很容易产生栈溢出。比较好的解决方法当然是用尾递归，但是就需要对算法进行修改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fib</span><span class="o">(</span><span class="n">tmp1</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">tmp2</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">n</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">0</span> <span class="k">=&gt;</span> <span class="n">tmp1</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span> <span class="k">=&gt;</span> <span class="n">tmp2</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">fib</span><span class="o">(</span><span class="n">tmp2</span><span class="o">,</span> <span class="n">tmp1</span><span class="o">+</span><span class="n">tmp2</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">fib</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">args</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">toInt</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>这显然不是段很好看的代码，而且平白无故的多引入了两个参数，语法也不足够的飘逸和简练。首先我得承认，我的修行不够，但从算法来看要实现的话肯定有更好的写法。不过Scala的文档中有一个通过不可变流（Immutable Stream）来生成斐波那契数列的方法倒是值得与大家分享一下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">fibForm</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">a</span> <span class="o">#::</span> <span class="n">fibForm</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">fibForm</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="n">args</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">toInt</span><span class="o">).</span><span class="n">last</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单解释一下。关键部分是“#::“，这并不是一段注释，而是scala中的stream容器内定义的一个方法，其作用是向stream中追加一个元素。第二句的take方法把外部的参数传给fibForm(1, 1)，作用是按照fibForm定义的方式生成含有args(0).toInt个元素的stream，last方法则返回了stream的最后一个元素值。</p>

<p>这段代码其实先是按照传入的参数生成了一个相应数目个元素的数列，然后返回了最后一个元素值，如果只是求值的话空间上有些浪费。</p>

<p>作为初识的话，我觉得写到这里差不多够了。这门语言水很深，还是需要努力学习啊！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Try]]></title>
    <link href="http://iceongrass.github.io/blog/2013/08/20/first-try/"/>
    <updated>2013-08-20T12:34:00+08:00</updated>
    <id>http://iceongrass.github.io/blog/2013/08/20/first-try</id>
    <content type="html"><![CDATA[<h1>Github博客第一弹</h1>

<h3>貌似应该各种牛逼的功能挨个用一遍</h3>

<p>关于斜体和粗体，这是 <em>斜体</em>，这是 <strong>粗体</strong>。语法规则跟twiki还是很像的。</p>

<!--more-->


<h3>2. 使用 === 表示一级标题，使用 &mdash;&ndash; 表示二级标题</h3>

<p>示例：</p>

<h1>这是一个一级标题</h1>

<h2>这是一个二级标题</h2>

<h3>这是一个三级标题</h3>

<p>你也可以选择在行首加井号表示不同级别的标题，例如：# H1, ## H2, ### H3。</p>

<h3>3. 使用 [描述](链接地址) 为文字增加外链接</h3>

<p>示例：</p>

<p>这是去往 <a href="http://ghosertblog.github.com">本人博客</a> 的链接。</p>

<h3>4. 在行末加两个空格表示换行</h3>

<p>示例：</p>

<p>第一行(此行最右有两个看不见的空格)<br/>
第二行</p>

<h3>5. 使用 *，+，- 表示无序列表</h3>

<p>示例：</p>

<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>


<h3>6. 使用数字和点表示有序列表</h3>

<p>示例：</p>

<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>


<h3>7. 使用 > 表示文字引用</h3>

<p>示例：</p>

<blockquote><p>野火烧不尽，春风吹又生</p></blockquote>

<h3>8. 使用 `代码` 表示行内代码块</h3>

<p>示例：</p>

<p>让我们聊聊 <code>html</code></p>

<h3>9.  使用 四个缩进空格 表示代码块</h3>

<p>示例：</p>

<pre><code>这是一个代码块，此行左侧有四个不可见的空格
</code></pre>

<h3>10.  使用 ![描述](图片链接地址) 插入图像</h3>

<p>示例：</p>

<p><img src="http://tp3.sinaimg.cn/2204681022/180/5606968568/1" alt="我的头像" /></p>

<h1>Cmd 高阶语法手册</h1>

<h3>1. LaTeX 公式，表达式支持</h3>

<p>$ 表示行内公式：</p>

<p>质能守恒方程可以用一个很简洁的方程式 $E=mc<sup>2</sup>$ 来表达</p>

<p>$$ 表示整行公式：</p>

<p>$$\sum_{i=1}^n a_i=0$$</p>

<p>$$f(x_1,x_x,\ldots,x_n) = x_1<sup>2</sup> + x_2<sup>2</sup> + \cdots + x_n<sup>2</sup> $$</p>

<h3>2. 加强的代码块，支持四十一种编程语言的语法高亮的显示，行号显示</h3>

<p>非代码示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get install vim-gnome</span></code></pre></td></tr></table></div></figure>


<p>Python 示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@requires_authorization</span>
</span><span class='line'><span class="k">def</span> <span class="nf">somefunc</span><span class="p">(</span><span class="n">param1</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">param2</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">r&#39;&#39;&#39;A docstring&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">param1</span> <span class="o">&gt;</span> <span class="n">param2</span><span class="p">:</span> <span class="c"># interesting</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Greater&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">param2</span> <span class="o">-</span> <span class="n">param1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">or</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;interpreter</span>
</span><span class='line'><span class="s">... prompt&#39;&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>JavaScript 示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* nth element in the fibonacci series.</span>
</span><span class='line'><span class="cm">* @param n &gt;= 0</span>
</span><span class='line'><span class="cm">* @return the nth element, &gt;= 0.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">fib</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">--</span><span class="nx">n</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">a</span> <span class="o">+=</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">b</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">fib</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 表格支持</h3>

<p>示例：</p>

<table>
<thead>
<tr>
<th></th>
<th> 项目        </th>
<th align="right"> 价格   </th>
<th align="center">  数量  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 计算机     </td>
<td align="right"> $1600 </td>
<td align="center">   5     |</td>
</tr>
<tr>
<td></td>
<td> 手机        </td>
<td align="right">   $12   </td>
<td align="center">   12   |</td>
</tr>
<tr>
<td></td>
<td> 管线        </td>
<td align="right">    $1    </td>
<td align="center">  234  |</td>
</tr>
</tbody>
</table>


<h3>4. 定义型列表</h3>

<p>名词 1
:   定义 1（左侧有一个可见的冒号和四个不可见的空格）</p>

<p>代码快 2
:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p>

<pre><code>    代码块（左侧有八个不可见的空格）
</code></pre>

<p>先这么着吧，回头慢慢研究。
话说，上次键盘同学分享的在线markdown编辑器还是蛮有意思的，附个链接在这里：</p>

<p>   <a href="http://ghosertblog.github.io/mdeditor/">http://ghosertblog.github.io/mdeditor/</a></p>
]]></content>
  </entry>
  
</feed>
